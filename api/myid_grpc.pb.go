// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api/myid.proto

package myid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MyId_TestEnvoy_FullMethodName = "/myid.MyId/TestEnvoy"
)

// MyIdClient is the client API for MyId service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyIdClient interface {
	TestEnvoy(ctx context.Context, in *TestEnvoyRequest, opts ...grpc.CallOption) (*TestEnvoyResponse, error)
}

type myIdClient struct {
	cc grpc.ClientConnInterface
}

func NewMyIdClient(cc grpc.ClientConnInterface) MyIdClient {
	return &myIdClient{cc}
}

func (c *myIdClient) TestEnvoy(ctx context.Context, in *TestEnvoyRequest, opts ...grpc.CallOption) (*TestEnvoyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestEnvoyResponse)
	err := c.cc.Invoke(ctx, MyId_TestEnvoy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyIdServer is the server API for MyId service.
// All implementations must embed UnimplementedMyIdServer
// for forward compatibility
type MyIdServer interface {
	TestEnvoy(context.Context, *TestEnvoyRequest) (*TestEnvoyResponse, error)
	mustEmbedUnimplementedMyIdServer()
}

// UnimplementedMyIdServer must be embedded to have forward compatible implementations.
type UnimplementedMyIdServer struct {
}

func (UnimplementedMyIdServer) TestEnvoy(context.Context, *TestEnvoyRequest) (*TestEnvoyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEnvoy not implemented")
}
func (UnimplementedMyIdServer) mustEmbedUnimplementedMyIdServer() {}

// UnsafeMyIdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyIdServer will
// result in compilation errors.
type UnsafeMyIdServer interface {
	mustEmbedUnimplementedMyIdServer()
}

func RegisterMyIdServer(s grpc.ServiceRegistrar, srv MyIdServer) {
	s.RegisterService(&MyId_ServiceDesc, srv)
}

func _MyId_TestEnvoy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestEnvoyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIdServer).TestEnvoy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyId_TestEnvoy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIdServer).TestEnvoy(ctx, req.(*TestEnvoyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyId_ServiceDesc is the grpc.ServiceDesc for MyId service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyId_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myid.MyId",
	HandlerType: (*MyIdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestEnvoy",
			Handler:    _MyId_TestEnvoy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/myid.proto",
}
